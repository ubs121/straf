//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace STraF_U {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DatasetGlobal : DataSet {
        
        private RegionDataTable tableRegion;
        
        private ProfDataTable tableProf;
        
        public DatasetGlobal() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DatasetGlobal(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Region"] != null)) {
                    this.Tables.Add(new RegionDataTable(ds.Tables["Region"]));
                }
                if ((ds.Tables["Prof"] != null)) {
                    this.Tables.Add(new ProfDataTable(ds.Tables["Prof"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RegionDataTable Region {
            get {
                return this.tableRegion;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProfDataTable Prof {
            get {
                return this.tableProf;
            }
        }
        
        public override DataSet Clone() {
            DatasetGlobal cln = ((DatasetGlobal)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Region"] != null)) {
                this.Tables.Add(new RegionDataTable(ds.Tables["Region"]));
            }
            if ((ds.Tables["Prof"] != null)) {
                this.Tables.Add(new ProfDataTable(ds.Tables["Prof"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableRegion = ((RegionDataTable)(this.Tables["Region"]));
            if ((this.tableRegion != null)) {
                this.tableRegion.InitVars();
            }
            this.tableProf = ((ProfDataTable)(this.Tables["Prof"]));
            if ((this.tableProf != null)) {
                this.tableProf.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DatasetGlobal";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DatasetGlobal.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableRegion = new RegionDataTable();
            this.Tables.Add(this.tableRegion);
            this.tableProf = new ProfDataTable();
            this.Tables.Add(this.tableProf);
        }
        
        private bool ShouldSerializeRegion() {
            return false;
        }
        
        private bool ShouldSerializeProf() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void RegionRowChangeEventHandler(object sender, RegionRowChangeEvent e);
        
        public delegate void ProfRowChangeEventHandler(object sender, ProfRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RegionDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnid;
            
            private DataColumn columnname;
            
            internal RegionDataTable() : 
                    base("Region") {
                this.InitClass();
            }
            
            internal RegionDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            public RegionRow this[int index] {
                get {
                    return ((RegionRow)(this.Rows[index]));
                }
            }
            
            public event RegionRowChangeEventHandler RegionRowChanged;
            
            public event RegionRowChangeEventHandler RegionRowChanging;
            
            public event RegionRowChangeEventHandler RegionRowDeleted;
            
            public event RegionRowChangeEventHandler RegionRowDeleting;
            
            public void AddRegionRow(RegionRow row) {
                this.Rows.Add(row);
            }
            
            public RegionRow AddRegionRow(string name) {
                RegionRow rowRegionRow = ((RegionRow)(this.NewRow()));
                rowRegionRow.ItemArray = new object[] {
                        null,
                        name};
                this.Rows.Add(rowRegionRow);
                return rowRegionRow;
            }
            
            public RegionRow FindByid(int id) {
                return ((RegionRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                RegionDataTable cln = ((RegionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new RegionDataTable();
            }
            
            internal void InitVars() {
                this.columnid = this.Columns["id"];
                this.columnname = this.Columns["name"];
            }
            
            private void InitClass() {
                this.columnid = new DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnid);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname);
                this.Constraints.Add(new UniqueConstraint("DatasetGlobalKey2", new DataColumn[] {
                                this.columnid}, true));
                this.columnid.AutoIncrement = true;
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
            }
            
            public RegionRow NewRegionRow() {
                return ((RegionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RegionRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(RegionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RegionRowChanged != null)) {
                    this.RegionRowChanged(this, new RegionRowChangeEvent(((RegionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RegionRowChanging != null)) {
                    this.RegionRowChanging(this, new RegionRowChangeEvent(((RegionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RegionRowDeleted != null)) {
                    this.RegionRowDeleted(this, new RegionRowChangeEvent(((RegionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RegionRowDeleting != null)) {
                    this.RegionRowDeleting(this, new RegionRowChangeEvent(((RegionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRegionRow(RegionRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RegionRow : DataRow {
            
            private RegionDataTable tableRegion;
            
            internal RegionRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRegion = ((RegionDataTable)(this.Table));
            }
            
            public int id {
                get {
                    return ((int)(this[this.tableRegion.idColumn]));
                }
                set {
                    this[this.tableRegion.idColumn] = value;
                }
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableRegion.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRegion.nameColumn] = value;
                }
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tableRegion.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tableRegion.nameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RegionRowChangeEvent : EventArgs {
            
            private RegionRow eventRow;
            
            private DataRowAction eventAction;
            
            public RegionRowChangeEvent(RegionRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public RegionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProfDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnshortname;
            
            private DataColumn columnname;
            
            private DataColumn columnduration;
            
            private DataColumn columndegree;
            
            private DataColumn columnt1;
            
            private DataColumn columnt2;
            
            private DataColumn columnt3;
            
            private DataColumn columnt4;
            
            private DataColumn columnt5;
            
            private DataColumn columnt6;
            
            internal ProfDataTable() : 
                    base("Prof") {
                this.InitClass();
            }
            
            internal ProfDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn shortnameColumn {
                get {
                    return this.columnshortname;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn durationColumn {
                get {
                    return this.columnduration;
                }
            }
            
            internal DataColumn degreeColumn {
                get {
                    return this.columndegree;
                }
            }
            
            internal DataColumn t1Column {
                get {
                    return this.columnt1;
                }
            }
            
            internal DataColumn t2Column {
                get {
                    return this.columnt2;
                }
            }
            
            internal DataColumn t3Column {
                get {
                    return this.columnt3;
                }
            }
            
            internal DataColumn t4Column {
                get {
                    return this.columnt4;
                }
            }
            
            internal DataColumn t5Column {
                get {
                    return this.columnt5;
                }
            }
            
            internal DataColumn t6Column {
                get {
                    return this.columnt6;
                }
            }
            
            public ProfRow this[int index] {
                get {
                    return ((ProfRow)(this.Rows[index]));
                }
            }
            
            public event ProfRowChangeEventHandler ProfRowChanged;
            
            public event ProfRowChangeEventHandler ProfRowChanging;
            
            public event ProfRowChangeEventHandler ProfRowDeleted;
            
            public event ProfRowChangeEventHandler ProfRowDeleting;
            
            public void AddProfRow(ProfRow row) {
                this.Rows.Add(row);
            }
            
            public ProfRow AddProfRow(string shortname, string name, System.Byte duration, string degree, System.Single t1, System.Single t2, System.Single t3, System.Single t4, System.Single t5, System.Single t6) {
                ProfRow rowProfRow = ((ProfRow)(this.NewRow()));
                rowProfRow.ItemArray = new object[] {
                        shortname,
                        name,
                        duration,
                        degree,
                        t1,
                        t2,
                        t3,
                        t4,
                        t5,
                        t6};
                this.Rows.Add(rowProfRow);
                return rowProfRow;
            }
            
            public ProfRow FindByshortname(string shortname) {
                return ((ProfRow)(this.Rows.Find(new object[] {
                            shortname})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProfDataTable cln = ((ProfDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProfDataTable();
            }
            
            internal void InitVars() {
                this.columnshortname = this.Columns["shortname"];
                this.columnname = this.Columns["name"];
                this.columnduration = this.Columns["duration"];
                this.columndegree = this.Columns["degree"];
                this.columnt1 = this.Columns["t1"];
                this.columnt2 = this.Columns["t2"];
                this.columnt3 = this.Columns["t3"];
                this.columnt4 = this.Columns["t4"];
                this.columnt5 = this.Columns["t5"];
                this.columnt6 = this.Columns["t6"];
            }
            
            private void InitClass() {
                this.columnshortname = new DataColumn("shortname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnshortname);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname);
                this.columnduration = new DataColumn("duration", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnduration);
                this.columndegree = new DataColumn("degree", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndegree);
                this.columnt1 = new DataColumn("t1", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnt1);
                this.columnt2 = new DataColumn("t2", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnt2);
                this.columnt3 = new DataColumn("t3", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnt3);
                this.columnt4 = new DataColumn("t4", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnt4);
                this.columnt5 = new DataColumn("t5", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnt5);
                this.columnt6 = new DataColumn("t6", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnt6);
                this.Constraints.Add(new UniqueConstraint("DatasetGlobalKey1", new DataColumn[] {
                                this.columnshortname}, true));
                this.columnshortname.AllowDBNull = false;
                this.columnshortname.Unique = true;
                this.columnduration.DefaultValue = 4;
                this.columndegree.DefaultValue = "бакалаврын";
                this.columnt1.DefaultValue = 0F;
                this.columnt2.DefaultValue = 0F;
                this.columnt3.DefaultValue = 0F;
                this.columnt4.DefaultValue = 0F;
                this.columnt5.DefaultValue = 0F;
                this.columnt6.DefaultValue = 0F;
            }
            
            public ProfRow NewProfRow() {
                return ((ProfRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProfRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProfRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProfRowChanged != null)) {
                    this.ProfRowChanged(this, new ProfRowChangeEvent(((ProfRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProfRowChanging != null)) {
                    this.ProfRowChanging(this, new ProfRowChangeEvent(((ProfRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProfRowDeleted != null)) {
                    this.ProfRowDeleted(this, new ProfRowChangeEvent(((ProfRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProfRowDeleting != null)) {
                    this.ProfRowDeleting(this, new ProfRowChangeEvent(((ProfRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProfRow(ProfRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProfRow : DataRow {
            
            private ProfDataTable tableProf;
            
            internal ProfRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProf = ((ProfDataTable)(this.Table));
            }
            
            public string shortname {
                get {
                    return ((string)(this[this.tableProf.shortnameColumn]));
                }
                set {
                    this[this.tableProf.shortnameColumn] = value;
                }
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableProf.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProf.nameColumn] = value;
                }
            }
            
            public System.Byte duration {
                get {
                    try {
                        return ((System.Byte)(this[this.tableProf.durationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProf.durationColumn] = value;
                }
            }
            
            public string degree {
                get {
                    try {
                        return ((string)(this[this.tableProf.degreeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProf.degreeColumn] = value;
                }
            }
            
            public System.Single t1 {
                get {
                    try {
                        return ((System.Single)(this[this.tableProf.t1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProf.t1Column] = value;
                }
            }
            
            public System.Single t2 {
                get {
                    try {
                        return ((System.Single)(this[this.tableProf.t2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProf.t2Column] = value;
                }
            }
            
            public System.Single t3 {
                get {
                    try {
                        return ((System.Single)(this[this.tableProf.t3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProf.t3Column] = value;
                }
            }
            
            public System.Single t4 {
                get {
                    try {
                        return ((System.Single)(this[this.tableProf.t4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProf.t4Column] = value;
                }
            }
            
            public System.Single t5 {
                get {
                    try {
                        return ((System.Single)(this[this.tableProf.t5Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProf.t5Column] = value;
                }
            }
            
            public System.Single t6 {
                get {
                    try {
                        return ((System.Single)(this[this.tableProf.t6Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProf.t6Column] = value;
                }
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tableProf.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tableProf.nameColumn] = System.Convert.DBNull;
            }
            
            public bool IsdurationNull() {
                return this.IsNull(this.tableProf.durationColumn);
            }
            
            public void SetdurationNull() {
                this[this.tableProf.durationColumn] = System.Convert.DBNull;
            }
            
            public bool IsdegreeNull() {
                return this.IsNull(this.tableProf.degreeColumn);
            }
            
            public void SetdegreeNull() {
                this[this.tableProf.degreeColumn] = System.Convert.DBNull;
            }
            
            public bool Ist1Null() {
                return this.IsNull(this.tableProf.t1Column);
            }
            
            public void Sett1Null() {
                this[this.tableProf.t1Column] = System.Convert.DBNull;
            }
            
            public bool Ist2Null() {
                return this.IsNull(this.tableProf.t2Column);
            }
            
            public void Sett2Null() {
                this[this.tableProf.t2Column] = System.Convert.DBNull;
            }
            
            public bool Ist3Null() {
                return this.IsNull(this.tableProf.t3Column);
            }
            
            public void Sett3Null() {
                this[this.tableProf.t3Column] = System.Convert.DBNull;
            }
            
            public bool Ist4Null() {
                return this.IsNull(this.tableProf.t4Column);
            }
            
            public void Sett4Null() {
                this[this.tableProf.t4Column] = System.Convert.DBNull;
            }
            
            public bool Ist5Null() {
                return this.IsNull(this.tableProf.t5Column);
            }
            
            public void Sett5Null() {
                this[this.tableProf.t5Column] = System.Convert.DBNull;
            }
            
            public bool Ist6Null() {
                return this.IsNull(this.tableProf.t6Column);
            }
            
            public void Sett6Null() {
                this[this.tableProf.t6Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProfRowChangeEvent : EventArgs {
            
            private ProfRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProfRowChangeEvent(ProfRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProfRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
