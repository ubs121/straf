//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace STraF_U {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DatasetTax : DataSet {
        
        private TaxDataTable tableTax;
        
        private TaxTuitionDataTable tableTaxTuition;
        
        private DataRelation relationTaxTaxTuition;
        
        public DatasetTax() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DatasetTax(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Tax"] != null)) {
                    this.Tables.Add(new TaxDataTable(ds.Tables["Tax"]));
                }
                if ((ds.Tables["TaxTuition"] != null)) {
                    this.Tables.Add(new TaxTuitionDataTable(ds.Tables["TaxTuition"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TaxDataTable Tax {
            get {
                return this.tableTax;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TaxTuitionDataTable TaxTuition {
            get {
                return this.tableTaxTuition;
            }
        }
        
        public override DataSet Clone() {
            DatasetTax cln = ((DatasetTax)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Tax"] != null)) {
                this.Tables.Add(new TaxDataTable(ds.Tables["Tax"]));
            }
            if ((ds.Tables["TaxTuition"] != null)) {
                this.Tables.Add(new TaxTuitionDataTable(ds.Tables["TaxTuition"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableTax = ((TaxDataTable)(this.Tables["Tax"]));
            if ((this.tableTax != null)) {
                this.tableTax.InitVars();
            }
            this.tableTaxTuition = ((TaxTuitionDataTable)(this.Tables["TaxTuition"]));
            if ((this.tableTaxTuition != null)) {
                this.tableTaxTuition.InitVars();
            }
            this.relationTaxTaxTuition = this.Relations["TaxTaxTuition"];
        }
        
        private void InitClass() {
            this.DataSetName = "DatasetTax";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DatasetTax.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableTax = new TaxDataTable();
            this.Tables.Add(this.tableTax);
            this.tableTaxTuition = new TaxTuitionDataTable();
            this.Tables.Add(this.tableTaxTuition);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("TaxTaxTuition", new DataColumn[] {
                        this.tableTax.idColumn}, new DataColumn[] {
                        this.tableTaxTuition.stidColumn});
            this.tableTaxTuition.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            this.relationTaxTaxTuition = new DataRelation("TaxTaxTuition", new DataColumn[] {
                        this.tableTax.idColumn}, new DataColumn[] {
                        this.tableTaxTuition.stidColumn}, false);
            this.Relations.Add(this.relationTaxTaxTuition);
        }
        
        private bool ShouldSerializeTax() {
            return false;
        }
        
        private bool ShouldSerializeTaxTuition() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void TaxRowChangeEventHandler(object sender, TaxRowChangeEvent e);
        
        public delegate void TaxTuitionRowChangeEventHandler(object sender, TaxTuitionRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TaxDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnid;
            
            private DataColumn columnlname;
            
            private DataColumn columnfname;
            
            private DataColumn columngender;
            
            private DataColumn columnprof;
            
            private DataColumn columngrade;
            
            private DataColumn columngpa;
            
            private DataColumn columnregion;
            
            private DataColumn columnadmisno;
            
            private DataColumn columnpasno;
            
            private DataColumn columnregno;
            
            private DataColumn columnpa_regno;
            
            private DataColumn columnma_regno;
            
            private DataColumn columncontract;
            
            private DataColumn columnname;
            
            private DataColumn columnorg;
            
            private DataColumn columnpos;
            
            private DataColumn columnstate;
            
            private DataColumn columnnote;
            
            internal TaxDataTable() : 
                    base("Tax") {
                this.InitClass();
            }
            
            internal TaxDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            internal DataColumn lnameColumn {
                get {
                    return this.columnlname;
                }
            }
            
            internal DataColumn fnameColumn {
                get {
                    return this.columnfname;
                }
            }
            
            internal DataColumn genderColumn {
                get {
                    return this.columngender;
                }
            }
            
            internal DataColumn profColumn {
                get {
                    return this.columnprof;
                }
            }
            
            internal DataColumn gradeColumn {
                get {
                    return this.columngrade;
                }
            }
            
            internal DataColumn gpaColumn {
                get {
                    return this.columngpa;
                }
            }
            
            internal DataColumn regionColumn {
                get {
                    return this.columnregion;
                }
            }
            
            internal DataColumn admisnoColumn {
                get {
                    return this.columnadmisno;
                }
            }
            
            internal DataColumn pasnoColumn {
                get {
                    return this.columnpasno;
                }
            }
            
            internal DataColumn regnoColumn {
                get {
                    return this.columnregno;
                }
            }
            
            internal DataColumn pa_regnoColumn {
                get {
                    return this.columnpa_regno;
                }
            }
            
            internal DataColumn ma_regnoColumn {
                get {
                    return this.columnma_regno;
                }
            }
            
            internal DataColumn contractColumn {
                get {
                    return this.columncontract;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn orgColumn {
                get {
                    return this.columnorg;
                }
            }
            
            internal DataColumn posColumn {
                get {
                    return this.columnpos;
                }
            }
            
            internal DataColumn stateColumn {
                get {
                    return this.columnstate;
                }
            }
            
            internal DataColumn noteColumn {
                get {
                    return this.columnnote;
                }
            }
            
            public TaxRow this[int index] {
                get {
                    return ((TaxRow)(this.Rows[index]));
                }
            }
            
            public event TaxRowChangeEventHandler TaxRowChanged;
            
            public event TaxRowChangeEventHandler TaxRowChanging;
            
            public event TaxRowChangeEventHandler TaxRowDeleted;
            
            public event TaxRowChangeEventHandler TaxRowDeleting;
            
            public void AddTaxRow(TaxRow row) {
                this.Rows.Add(row);
            }
            
            public TaxRow AddTaxRow(
                        string lname, 
                        string fname, 
                        string gender, 
                        string prof, 
                        System.Byte grade, 
                        System.Single gpa, 
                        string region, 
                        string admisno, 
                        string pasno, 
                        string regno, 
                        string pa_regno, 
                        string ma_regno, 
                        string contract, 
                        string name, 
                        string org, 
                        string pos, 
                        System.Byte state, 
                        string note) {
                TaxRow rowTaxRow = ((TaxRow)(this.NewRow()));
                rowTaxRow.ItemArray = new object[] {
                        null,
                        lname,
                        fname,
                        gender,
                        prof,
                        grade,
                        gpa,
                        region,
                        admisno,
                        pasno,
                        regno,
                        pa_regno,
                        ma_regno,
                        contract,
                        name,
                        org,
                        pos,
                        state,
                        note};
                this.Rows.Add(rowTaxRow);
                return rowTaxRow;
            }
            
            public TaxRow FindByid(int id) {
                return ((TaxRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TaxDataTable cln = ((TaxDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TaxDataTable();
            }
            
            internal void InitVars() {
                this.columnid = this.Columns["id"];
                this.columnlname = this.Columns["lname"];
                this.columnfname = this.Columns["fname"];
                this.columngender = this.Columns["gender"];
                this.columnprof = this.Columns["prof"];
                this.columngrade = this.Columns["grade"];
                this.columngpa = this.Columns["gpa"];
                this.columnregion = this.Columns["region"];
                this.columnadmisno = this.Columns["admisno"];
                this.columnpasno = this.Columns["pasno"];
                this.columnregno = this.Columns["regno"];
                this.columnpa_regno = this.Columns["pa_regno"];
                this.columnma_regno = this.Columns["ma_regno"];
                this.columncontract = this.Columns["contract"];
                this.columnname = this.Columns["name"];
                this.columnorg = this.Columns["org"];
                this.columnpos = this.Columns["pos"];
                this.columnstate = this.Columns["state"];
                this.columnnote = this.Columns["note"];
            }
            
            private void InitClass() {
                this.columnid = new DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnid);
                this.columnlname = new DataColumn("lname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlname);
                this.columnfname = new DataColumn("fname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfname);
                this.columngender = new DataColumn("gender", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columngender);
                this.columnprof = new DataColumn("prof", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprof);
                this.columngrade = new DataColumn("grade", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columngrade);
                this.columngpa = new DataColumn("gpa", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columngpa);
                this.columnregion = new DataColumn("region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnregion);
                this.columnadmisno = new DataColumn("admisno", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnadmisno);
                this.columnpasno = new DataColumn("pasno", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpasno);
                this.columnregno = new DataColumn("regno", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnregno);
                this.columnpa_regno = new DataColumn("pa_regno", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpa_regno);
                this.columnma_regno = new DataColumn("ma_regno", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnma_regno);
                this.columncontract = new DataColumn("contract", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncontract);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname);
                this.columnorg = new DataColumn("org", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnorg);
                this.columnpos = new DataColumn("pos", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpos);
                this.columnstate = new DataColumn("state", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstate);
                this.columnnote = new DataColumn("note", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnote);
                this.Constraints.Add(new UniqueConstraint("DatasetTaxKey1", new DataColumn[] {
                                this.columnid}, true));
                this.columnid.AutoIncrement = true;
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columngender.DefaultValue = "эр";
                this.columngrade.DefaultValue = 1;
                this.columngpa.DefaultValue = 0F;
                this.columnregion.DefaultValue = "Улаанбаатар";
                this.columncontract.DefaultValue = "эцэг";
                this.columnstate.DefaultValue = 1;
            }
            
            public TaxRow NewTaxRow() {
                return ((TaxRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TaxRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TaxRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TaxRowChanged != null)) {
                    this.TaxRowChanged(this, new TaxRowChangeEvent(((TaxRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TaxRowChanging != null)) {
                    this.TaxRowChanging(this, new TaxRowChangeEvent(((TaxRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TaxRowDeleted != null)) {
                    this.TaxRowDeleted(this, new TaxRowChangeEvent(((TaxRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TaxRowDeleting != null)) {
                    this.TaxRowDeleting(this, new TaxRowChangeEvent(((TaxRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTaxRow(TaxRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TaxRow : DataRow {
            
            private TaxDataTable tableTax;
            
            internal TaxRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTax = ((TaxDataTable)(this.Table));
            }
            
            public int id {
                get {
                    return ((int)(this[this.tableTax.idColumn]));
                }
                set {
                    this[this.tableTax.idColumn] = value;
                }
            }
            
            public string lname {
                get {
                    try {
                        return ((string)(this[this.tableTax.lnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.lnameColumn] = value;
                }
            }
            
            public string fname {
                get {
                    try {
                        return ((string)(this[this.tableTax.fnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.fnameColumn] = value;
                }
            }
            
            public string gender {
                get {
                    try {
                        return ((string)(this[this.tableTax.genderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.genderColumn] = value;
                }
            }
            
            public string prof {
                get {
                    try {
                        return ((string)(this[this.tableTax.profColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.profColumn] = value;
                }
            }
            
            public System.Byte grade {
                get {
                    try {
                        return ((System.Byte)(this[this.tableTax.gradeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.gradeColumn] = value;
                }
            }
            
            public System.Single gpa {
                get {
                    try {
                        return ((System.Single)(this[this.tableTax.gpaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.gpaColumn] = value;
                }
            }
            
            public string region {
                get {
                    try {
                        return ((string)(this[this.tableTax.regionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.regionColumn] = value;
                }
            }
            
            public string admisno {
                get {
                    try {
                        return ((string)(this[this.tableTax.admisnoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.admisnoColumn] = value;
                }
            }
            
            public string pasno {
                get {
                    try {
                        return ((string)(this[this.tableTax.pasnoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.pasnoColumn] = value;
                }
            }
            
            public string regno {
                get {
                    try {
                        return ((string)(this[this.tableTax.regnoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.regnoColumn] = value;
                }
            }
            
            public string pa_regno {
                get {
                    try {
                        return ((string)(this[this.tableTax.pa_regnoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.pa_regnoColumn] = value;
                }
            }
            
            public string ma_regno {
                get {
                    try {
                        return ((string)(this[this.tableTax.ma_regnoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.ma_regnoColumn] = value;
                }
            }
            
            public string contract {
                get {
                    try {
                        return ((string)(this[this.tableTax.contractColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.contractColumn] = value;
                }
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableTax.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.nameColumn] = value;
                }
            }
            
            public string org {
                get {
                    try {
                        return ((string)(this[this.tableTax.orgColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.orgColumn] = value;
                }
            }
            
            public string pos {
                get {
                    try {
                        return ((string)(this[this.tableTax.posColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.posColumn] = value;
                }
            }
            
            public System.Byte state {
                get {
                    try {
                        return ((System.Byte)(this[this.tableTax.stateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.stateColumn] = value;
                }
            }
            
            public string note {
                get {
                    try {
                        return ((string)(this[this.tableTax.noteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.noteColumn] = value;
                }
            }
            
            public bool IslnameNull() {
                return this.IsNull(this.tableTax.lnameColumn);
            }
            
            public void SetlnameNull() {
                this[this.tableTax.lnameColumn] = System.Convert.DBNull;
            }
            
            public bool IsfnameNull() {
                return this.IsNull(this.tableTax.fnameColumn);
            }
            
            public void SetfnameNull() {
                this[this.tableTax.fnameColumn] = System.Convert.DBNull;
            }
            
            public bool IsgenderNull() {
                return this.IsNull(this.tableTax.genderColumn);
            }
            
            public void SetgenderNull() {
                this[this.tableTax.genderColumn] = System.Convert.DBNull;
            }
            
            public bool IsprofNull() {
                return this.IsNull(this.tableTax.profColumn);
            }
            
            public void SetprofNull() {
                this[this.tableTax.profColumn] = System.Convert.DBNull;
            }
            
            public bool IsgradeNull() {
                return this.IsNull(this.tableTax.gradeColumn);
            }
            
            public void SetgradeNull() {
                this[this.tableTax.gradeColumn] = System.Convert.DBNull;
            }
            
            public bool IsgpaNull() {
                return this.IsNull(this.tableTax.gpaColumn);
            }
            
            public void SetgpaNull() {
                this[this.tableTax.gpaColumn] = System.Convert.DBNull;
            }
            
            public bool IsregionNull() {
                return this.IsNull(this.tableTax.regionColumn);
            }
            
            public void SetregionNull() {
                this[this.tableTax.regionColumn] = System.Convert.DBNull;
            }
            
            public bool IsadmisnoNull() {
                return this.IsNull(this.tableTax.admisnoColumn);
            }
            
            public void SetadmisnoNull() {
                this[this.tableTax.admisnoColumn] = System.Convert.DBNull;
            }
            
            public bool IspasnoNull() {
                return this.IsNull(this.tableTax.pasnoColumn);
            }
            
            public void SetpasnoNull() {
                this[this.tableTax.pasnoColumn] = System.Convert.DBNull;
            }
            
            public bool IsregnoNull() {
                return this.IsNull(this.tableTax.regnoColumn);
            }
            
            public void SetregnoNull() {
                this[this.tableTax.regnoColumn] = System.Convert.DBNull;
            }
            
            public bool Ispa_regnoNull() {
                return this.IsNull(this.tableTax.pa_regnoColumn);
            }
            
            public void Setpa_regnoNull() {
                this[this.tableTax.pa_regnoColumn] = System.Convert.DBNull;
            }
            
            public bool Isma_regnoNull() {
                return this.IsNull(this.tableTax.ma_regnoColumn);
            }
            
            public void Setma_regnoNull() {
                this[this.tableTax.ma_regnoColumn] = System.Convert.DBNull;
            }
            
            public bool IscontractNull() {
                return this.IsNull(this.tableTax.contractColumn);
            }
            
            public void SetcontractNull() {
                this[this.tableTax.contractColumn] = System.Convert.DBNull;
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tableTax.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tableTax.nameColumn] = System.Convert.DBNull;
            }
            
            public bool IsorgNull() {
                return this.IsNull(this.tableTax.orgColumn);
            }
            
            public void SetorgNull() {
                this[this.tableTax.orgColumn] = System.Convert.DBNull;
            }
            
            public bool IsposNull() {
                return this.IsNull(this.tableTax.posColumn);
            }
            
            public void SetposNull() {
                this[this.tableTax.posColumn] = System.Convert.DBNull;
            }
            
            public bool IsstateNull() {
                return this.IsNull(this.tableTax.stateColumn);
            }
            
            public void SetstateNull() {
                this[this.tableTax.stateColumn] = System.Convert.DBNull;
            }
            
            public bool IsnoteNull() {
                return this.IsNull(this.tableTax.noteColumn);
            }
            
            public void SetnoteNull() {
                this[this.tableTax.noteColumn] = System.Convert.DBNull;
            }
            
            public TaxTuitionRow[] GetTaxTuitionRows() {
                return ((TaxTuitionRow[])(this.GetChildRows(this.Table.ChildRelations["TaxTaxTuition"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TaxRowChangeEvent : EventArgs {
            
            private TaxRow eventRow;
            
            private DataRowAction eventAction;
            
            public TaxRowChangeEvent(TaxRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TaxRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TaxTuitionDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnstid;
            
            private DataColumn columntdate;
            
            private DataColumn columntsize;
            
            private DataColumn columntdesc;
            
            internal TaxTuitionDataTable() : 
                    base("TaxTuition") {
                this.InitClass();
            }
            
            internal TaxTuitionDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn stidColumn {
                get {
                    return this.columnstid;
                }
            }
            
            internal DataColumn tdateColumn {
                get {
                    return this.columntdate;
                }
            }
            
            internal DataColumn tsizeColumn {
                get {
                    return this.columntsize;
                }
            }
            
            internal DataColumn tdescColumn {
                get {
                    return this.columntdesc;
                }
            }
            
            public TaxTuitionRow this[int index] {
                get {
                    return ((TaxTuitionRow)(this.Rows[index]));
                }
            }
            
            public event TaxTuitionRowChangeEventHandler TaxTuitionRowChanged;
            
            public event TaxTuitionRowChangeEventHandler TaxTuitionRowChanging;
            
            public event TaxTuitionRowChangeEventHandler TaxTuitionRowDeleted;
            
            public event TaxTuitionRowChangeEventHandler TaxTuitionRowDeleting;
            
            public void AddTaxTuitionRow(TaxTuitionRow row) {
                this.Rows.Add(row);
            }
            
            public TaxTuitionRow AddTaxTuitionRow(TaxRow parentTaxRowByTaxTaxTuition, System.DateTime tdate, System.Single tsize, string tdesc) {
                TaxTuitionRow rowTaxTuitionRow = ((TaxTuitionRow)(this.NewRow()));
                rowTaxTuitionRow.ItemArray = new object[] {
                        parentTaxRowByTaxTaxTuition[0],
                        tdate,
                        tsize,
                        tdesc};
                this.Rows.Add(rowTaxTuitionRow);
                return rowTaxTuitionRow;
            }
            
            public TaxTuitionRow FindBystidtdate(int stid, System.DateTime tdate) {
                return ((TaxTuitionRow)(this.Rows.Find(new object[] {
                            stid,
                            tdate})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TaxTuitionDataTable cln = ((TaxTuitionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TaxTuitionDataTable();
            }
            
            internal void InitVars() {
                this.columnstid = this.Columns["stid"];
                this.columntdate = this.Columns["tdate"];
                this.columntsize = this.Columns["tsize"];
                this.columntdesc = this.Columns["tdesc"];
            }
            
            private void InitClass() {
                this.columnstid = new DataColumn("stid", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstid);
                this.columntdate = new DataColumn("tdate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntdate);
                this.columntsize = new DataColumn("tsize", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntsize);
                this.columntdesc = new DataColumn("tdesc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntdesc);
                this.Constraints.Add(new UniqueConstraint("DatasetTaxKey2", new DataColumn[] {
                                this.columnstid,
                                this.columntdate}, true));
                this.Constraints.Add(new UniqueConstraint("key1", new DataColumn[] {
                                this.columnstid}, false));
                this.columnstid.AllowDBNull = false;
                this.columnstid.Unique = true;
                this.columntdate.AllowDBNull = false;
            }
            
            public TaxTuitionRow NewTaxTuitionRow() {
                return ((TaxTuitionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TaxTuitionRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TaxTuitionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TaxTuitionRowChanged != null)) {
                    this.TaxTuitionRowChanged(this, new TaxTuitionRowChangeEvent(((TaxTuitionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TaxTuitionRowChanging != null)) {
                    this.TaxTuitionRowChanging(this, new TaxTuitionRowChangeEvent(((TaxTuitionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TaxTuitionRowDeleted != null)) {
                    this.TaxTuitionRowDeleted(this, new TaxTuitionRowChangeEvent(((TaxTuitionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TaxTuitionRowDeleting != null)) {
                    this.TaxTuitionRowDeleting(this, new TaxTuitionRowChangeEvent(((TaxTuitionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTaxTuitionRow(TaxTuitionRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TaxTuitionRow : DataRow {
            
            private TaxTuitionDataTable tableTaxTuition;
            
            internal TaxTuitionRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTaxTuition = ((TaxTuitionDataTable)(this.Table));
            }
            
            public int stid {
                get {
                    return ((int)(this[this.tableTaxTuition.stidColumn]));
                }
                set {
                    this[this.tableTaxTuition.stidColumn] = value;
                }
            }
            
            public System.DateTime tdate {
                get {
                    return ((System.DateTime)(this[this.tableTaxTuition.tdateColumn]));
                }
                set {
                    this[this.tableTaxTuition.tdateColumn] = value;
                }
            }
            
            public System.Single tsize {
                get {
                    try {
                        return ((System.Single)(this[this.tableTaxTuition.tsizeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxTuition.tsizeColumn] = value;
                }
            }
            
            public string tdesc {
                get {
                    try {
                        return ((string)(this[this.tableTaxTuition.tdescColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxTuition.tdescColumn] = value;
                }
            }
            
            public TaxRow TaxRow {
                get {
                    return ((TaxRow)(this.GetParentRow(this.Table.ParentRelations["TaxTaxTuition"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TaxTaxTuition"]);
                }
            }
            
            public bool IstsizeNull() {
                return this.IsNull(this.tableTaxTuition.tsizeColumn);
            }
            
            public void SettsizeNull() {
                this[this.tableTaxTuition.tsizeColumn] = System.Convert.DBNull;
            }
            
            public bool IstdescNull() {
                return this.IsNull(this.tableTaxTuition.tdescColumn);
            }
            
            public void SettdescNull() {
                this[this.tableTaxTuition.tdescColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TaxTuitionRowChangeEvent : EventArgs {
            
            private TaxTuitionRow eventRow;
            
            private DataRowAction eventAction;
            
            public TaxTuitionRowChangeEvent(TaxTuitionRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TaxTuitionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
