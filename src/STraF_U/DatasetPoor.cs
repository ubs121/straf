//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace STraF_U {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DatasetPoor : DataSet {
        
        private PoorDataTable tablePoor;
        
        private PoorTuitionDataTable tablePoorTuition;
        
        private DataRelation relationPoorPoorTuition;
        
        public DatasetPoor() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DatasetPoor(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Poor"] != null)) {
                    this.Tables.Add(new PoorDataTable(ds.Tables["Poor"]));
                }
                if ((ds.Tables["PoorTuition"] != null)) {
                    this.Tables.Add(new PoorTuitionDataTable(ds.Tables["PoorTuition"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PoorDataTable Poor {
            get {
                return this.tablePoor;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PoorTuitionDataTable PoorTuition {
            get {
                return this.tablePoorTuition;
            }
        }
        
        public override DataSet Clone() {
            DatasetPoor cln = ((DatasetPoor)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Poor"] != null)) {
                this.Tables.Add(new PoorDataTable(ds.Tables["Poor"]));
            }
            if ((ds.Tables["PoorTuition"] != null)) {
                this.Tables.Add(new PoorTuitionDataTable(ds.Tables["PoorTuition"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablePoor = ((PoorDataTable)(this.Tables["Poor"]));
            if ((this.tablePoor != null)) {
                this.tablePoor.InitVars();
            }
            this.tablePoorTuition = ((PoorTuitionDataTable)(this.Tables["PoorTuition"]));
            if ((this.tablePoorTuition != null)) {
                this.tablePoorTuition.InitVars();
            }
            this.relationPoorPoorTuition = this.Relations["PoorPoorTuition"];
        }
        
        private void InitClass() {
            this.DataSetName = "DatasetPoor";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DatasetPoor.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablePoor = new PoorDataTable();
            this.Tables.Add(this.tablePoor);
            this.tablePoorTuition = new PoorTuitionDataTable();
            this.Tables.Add(this.tablePoorTuition);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("PoorPoorTuition", new DataColumn[] {
                        this.tablePoor.idColumn}, new DataColumn[] {
                        this.tablePoorTuition.stidColumn});
            this.tablePoorTuition.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            this.relationPoorPoorTuition = new DataRelation("PoorPoorTuition", new DataColumn[] {
                        this.tablePoor.idColumn}, new DataColumn[] {
                        this.tablePoorTuition.stidColumn}, false);
            this.Relations.Add(this.relationPoorPoorTuition);
        }
        
        private bool ShouldSerializePoor() {
            return false;
        }
        
        private bool ShouldSerializePoorTuition() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void PoorRowChangeEventHandler(object sender, PoorRowChangeEvent e);
        
        public delegate void PoorTuitionRowChangeEventHandler(object sender, PoorTuitionRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PoorDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnid;
            
            private DataColumn columnlname;
            
            private DataColumn columnfname;
            
            private DataColumn columngender;
            
            private DataColumn columnprof;
            
            private DataColumn columngrade;
            
            private DataColumn columngpa;
            
            private DataColumn columnregion;
            
            private DataColumn columnadmisno;
            
            private DataColumn columnpasno;
            
            private DataColumn columnregno;
            
            private DataColumn columnfamily;
            
            private DataColumn columnincome;
            
            private DataColumn columnstate;
            
            private DataColumn columnnote;
            
            internal PoorDataTable() : 
                    base("Poor") {
                this.InitClass();
            }
            
            internal PoorDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            internal DataColumn lnameColumn {
                get {
                    return this.columnlname;
                }
            }
            
            internal DataColumn fnameColumn {
                get {
                    return this.columnfname;
                }
            }
            
            internal DataColumn genderColumn {
                get {
                    return this.columngender;
                }
            }
            
            internal DataColumn profColumn {
                get {
                    return this.columnprof;
                }
            }
            
            internal DataColumn gradeColumn {
                get {
                    return this.columngrade;
                }
            }
            
            internal DataColumn gpaColumn {
                get {
                    return this.columngpa;
                }
            }
            
            internal DataColumn regionColumn {
                get {
                    return this.columnregion;
                }
            }
            
            internal DataColumn admisnoColumn {
                get {
                    return this.columnadmisno;
                }
            }
            
            internal DataColumn pasnoColumn {
                get {
                    return this.columnpasno;
                }
            }
            
            internal DataColumn regnoColumn {
                get {
                    return this.columnregno;
                }
            }
            
            internal DataColumn familyColumn {
                get {
                    return this.columnfamily;
                }
            }
            
            internal DataColumn incomeColumn {
                get {
                    return this.columnincome;
                }
            }
            
            internal DataColumn stateColumn {
                get {
                    return this.columnstate;
                }
            }
            
            internal DataColumn noteColumn {
                get {
                    return this.columnnote;
                }
            }
            
            public PoorRow this[int index] {
                get {
                    return ((PoorRow)(this.Rows[index]));
                }
            }
            
            public event PoorRowChangeEventHandler PoorRowChanged;
            
            public event PoorRowChangeEventHandler PoorRowChanging;
            
            public event PoorRowChangeEventHandler PoorRowDeleted;
            
            public event PoorRowChangeEventHandler PoorRowDeleting;
            
            public void AddPoorRow(PoorRow row) {
                this.Rows.Add(row);
            }
            
            public PoorRow AddPoorRow(string lname, string fname, string gender, string prof, System.Byte grade, System.Single gpa, string region, string admisno, string pasno, string regno, System.Byte family, System.Single income, System.Byte state, string note) {
                PoorRow rowPoorRow = ((PoorRow)(this.NewRow()));
                rowPoorRow.ItemArray = new object[] {
                        null,
                        lname,
                        fname,
                        gender,
                        prof,
                        grade,
                        gpa,
                        region,
                        admisno,
                        pasno,
                        regno,
                        family,
                        income,
                        state,
                        note};
                this.Rows.Add(rowPoorRow);
                return rowPoorRow;
            }
            
            public PoorRow FindByid(int id) {
                return ((PoorRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PoorDataTable cln = ((PoorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PoorDataTable();
            }
            
            internal void InitVars() {
                this.columnid = this.Columns["id"];
                this.columnlname = this.Columns["lname"];
                this.columnfname = this.Columns["fname"];
                this.columngender = this.Columns["gender"];
                this.columnprof = this.Columns["prof"];
                this.columngrade = this.Columns["grade"];
                this.columngpa = this.Columns["gpa"];
                this.columnregion = this.Columns["region"];
                this.columnadmisno = this.Columns["admisno"];
                this.columnpasno = this.Columns["pasno"];
                this.columnregno = this.Columns["regno"];
                this.columnfamily = this.Columns["family"];
                this.columnincome = this.Columns["income"];
                this.columnstate = this.Columns["state"];
                this.columnnote = this.Columns["note"];
            }
            
            private void InitClass() {
                this.columnid = new DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnid);
                this.columnlname = new DataColumn("lname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlname);
                this.columnfname = new DataColumn("fname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfname);
                this.columngender = new DataColumn("gender", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columngender);
                this.columnprof = new DataColumn("prof", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprof);
                this.columngrade = new DataColumn("grade", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columngrade);
                this.columngpa = new DataColumn("gpa", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columngpa);
                this.columnregion = new DataColumn("region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnregion);
                this.columnadmisno = new DataColumn("admisno", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnadmisno);
                this.columnpasno = new DataColumn("pasno", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpasno);
                this.columnregno = new DataColumn("regno", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnregno);
                this.columnfamily = new DataColumn("family", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfamily);
                this.columnincome = new DataColumn("income", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnincome);
                this.columnstate = new DataColumn("state", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstate);
                this.columnnote = new DataColumn("note", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnote);
                this.Constraints.Add(new UniqueConstraint("DatasetPoorKey1", new DataColumn[] {
                                this.columnid}, true));
                this.columnid.AutoIncrement = true;
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columngender.DefaultValue = "эр";
                this.columngrade.DefaultValue = 1;
                this.columngpa.DefaultValue = 0F;
                this.columnregion.DefaultValue = "Улаанбаатар";
                this.columnfamily.DefaultValue = 1;
                this.columnincome.DefaultValue = 0F;
                this.columnstate.DefaultValue = 1;
            }
            
            public PoorRow NewPoorRow() {
                return ((PoorRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PoorRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PoorRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PoorRowChanged != null)) {
                    this.PoorRowChanged(this, new PoorRowChangeEvent(((PoorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PoorRowChanging != null)) {
                    this.PoorRowChanging(this, new PoorRowChangeEvent(((PoorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PoorRowDeleted != null)) {
                    this.PoorRowDeleted(this, new PoorRowChangeEvent(((PoorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PoorRowDeleting != null)) {
                    this.PoorRowDeleting(this, new PoorRowChangeEvent(((PoorRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePoorRow(PoorRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PoorRow : DataRow {
            
            private PoorDataTable tablePoor;
            
            internal PoorRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePoor = ((PoorDataTable)(this.Table));
            }
            
            public int id {
                get {
                    return ((int)(this[this.tablePoor.idColumn]));
                }
                set {
                    this[this.tablePoor.idColumn] = value;
                }
            }
            
            public string lname {
                get {
                    try {
                        return ((string)(this[this.tablePoor.lnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoor.lnameColumn] = value;
                }
            }
            
            public string fname {
                get {
                    try {
                        return ((string)(this[this.tablePoor.fnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoor.fnameColumn] = value;
                }
            }
            
            public string gender {
                get {
                    try {
                        return ((string)(this[this.tablePoor.genderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoor.genderColumn] = value;
                }
            }
            
            public string prof {
                get {
                    try {
                        return ((string)(this[this.tablePoor.profColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoor.profColumn] = value;
                }
            }
            
            public System.Byte grade {
                get {
                    try {
                        return ((System.Byte)(this[this.tablePoor.gradeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoor.gradeColumn] = value;
                }
            }
            
            public System.Single gpa {
                get {
                    try {
                        return ((System.Single)(this[this.tablePoor.gpaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoor.gpaColumn] = value;
                }
            }
            
            public string region {
                get {
                    try {
                        return ((string)(this[this.tablePoor.regionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoor.regionColumn] = value;
                }
            }
            
            public string admisno {
                get {
                    try {
                        return ((string)(this[this.tablePoor.admisnoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoor.admisnoColumn] = value;
                }
            }
            
            public string pasno {
                get {
                    try {
                        return ((string)(this[this.tablePoor.pasnoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoor.pasnoColumn] = value;
                }
            }
            
            public string regno {
                get {
                    try {
                        return ((string)(this[this.tablePoor.regnoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoor.regnoColumn] = value;
                }
            }
            
            public System.Byte family {
                get {
                    try {
                        return ((System.Byte)(this[this.tablePoor.familyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoor.familyColumn] = value;
                }
            }
            
            public System.Single income {
                get {
                    try {
                        return ((System.Single)(this[this.tablePoor.incomeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoor.incomeColumn] = value;
                }
            }
            
            public System.Byte state {
                get {
                    try {
                        return ((System.Byte)(this[this.tablePoor.stateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoor.stateColumn] = value;
                }
            }
            
            public string note {
                get {
                    try {
                        return ((string)(this[this.tablePoor.noteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoor.noteColumn] = value;
                }
            }
            
            public bool IslnameNull() {
                return this.IsNull(this.tablePoor.lnameColumn);
            }
            
            public void SetlnameNull() {
                this[this.tablePoor.lnameColumn] = System.Convert.DBNull;
            }
            
            public bool IsfnameNull() {
                return this.IsNull(this.tablePoor.fnameColumn);
            }
            
            public void SetfnameNull() {
                this[this.tablePoor.fnameColumn] = System.Convert.DBNull;
            }
            
            public bool IsgenderNull() {
                return this.IsNull(this.tablePoor.genderColumn);
            }
            
            public void SetgenderNull() {
                this[this.tablePoor.genderColumn] = System.Convert.DBNull;
            }
            
            public bool IsprofNull() {
                return this.IsNull(this.tablePoor.profColumn);
            }
            
            public void SetprofNull() {
                this[this.tablePoor.profColumn] = System.Convert.DBNull;
            }
            
            public bool IsgradeNull() {
                return this.IsNull(this.tablePoor.gradeColumn);
            }
            
            public void SetgradeNull() {
                this[this.tablePoor.gradeColumn] = System.Convert.DBNull;
            }
            
            public bool IsgpaNull() {
                return this.IsNull(this.tablePoor.gpaColumn);
            }
            
            public void SetgpaNull() {
                this[this.tablePoor.gpaColumn] = System.Convert.DBNull;
            }
            
            public bool IsregionNull() {
                return this.IsNull(this.tablePoor.regionColumn);
            }
            
            public void SetregionNull() {
                this[this.tablePoor.regionColumn] = System.Convert.DBNull;
            }
            
            public bool IsadmisnoNull() {
                return this.IsNull(this.tablePoor.admisnoColumn);
            }
            
            public void SetadmisnoNull() {
                this[this.tablePoor.admisnoColumn] = System.Convert.DBNull;
            }
            
            public bool IspasnoNull() {
                return this.IsNull(this.tablePoor.pasnoColumn);
            }
            
            public void SetpasnoNull() {
                this[this.tablePoor.pasnoColumn] = System.Convert.DBNull;
            }
            
            public bool IsregnoNull() {
                return this.IsNull(this.tablePoor.regnoColumn);
            }
            
            public void SetregnoNull() {
                this[this.tablePoor.regnoColumn] = System.Convert.DBNull;
            }
            
            public bool IsfamilyNull() {
                return this.IsNull(this.tablePoor.familyColumn);
            }
            
            public void SetfamilyNull() {
                this[this.tablePoor.familyColumn] = System.Convert.DBNull;
            }
            
            public bool IsincomeNull() {
                return this.IsNull(this.tablePoor.incomeColumn);
            }
            
            public void SetincomeNull() {
                this[this.tablePoor.incomeColumn] = System.Convert.DBNull;
            }
            
            public bool IsstateNull() {
                return this.IsNull(this.tablePoor.stateColumn);
            }
            
            public void SetstateNull() {
                this[this.tablePoor.stateColumn] = System.Convert.DBNull;
            }
            
            public bool IsnoteNull() {
                return this.IsNull(this.tablePoor.noteColumn);
            }
            
            public void SetnoteNull() {
                this[this.tablePoor.noteColumn] = System.Convert.DBNull;
            }
            
            public PoorTuitionRow[] GetPoorTuitionRows() {
                return ((PoorTuitionRow[])(this.GetChildRows(this.Table.ChildRelations["PoorPoorTuition"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PoorRowChangeEvent : EventArgs {
            
            private PoorRow eventRow;
            
            private DataRowAction eventAction;
            
            public PoorRowChangeEvent(PoorRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PoorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PoorTuitionDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnstid;
            
            private DataColumn columntdate;
            
            private DataColumn columntsize;
            
            private DataColumn columntdesc;
            
            internal PoorTuitionDataTable() : 
                    base("PoorTuition") {
                this.InitClass();
            }
            
            internal PoorTuitionDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn stidColumn {
                get {
                    return this.columnstid;
                }
            }
            
            internal DataColumn tdateColumn {
                get {
                    return this.columntdate;
                }
            }
            
            internal DataColumn tsizeColumn {
                get {
                    return this.columntsize;
                }
            }
            
            internal DataColumn tdescColumn {
                get {
                    return this.columntdesc;
                }
            }
            
            public PoorTuitionRow this[int index] {
                get {
                    return ((PoorTuitionRow)(this.Rows[index]));
                }
            }
            
            public event PoorTuitionRowChangeEventHandler PoorTuitionRowChanged;
            
            public event PoorTuitionRowChangeEventHandler PoorTuitionRowChanging;
            
            public event PoorTuitionRowChangeEventHandler PoorTuitionRowDeleted;
            
            public event PoorTuitionRowChangeEventHandler PoorTuitionRowDeleting;
            
            public void AddPoorTuitionRow(PoorTuitionRow row) {
                this.Rows.Add(row);
            }
            
            public PoorTuitionRow AddPoorTuitionRow(PoorRow parentPoorRowByPoorPoorTuition, System.DateTime tdate, System.Single tsize, string tdesc) {
                PoorTuitionRow rowPoorTuitionRow = ((PoorTuitionRow)(this.NewRow()));
                rowPoorTuitionRow.ItemArray = new object[] {
                        parentPoorRowByPoorPoorTuition[0],
                        tdate,
                        tsize,
                        tdesc};
                this.Rows.Add(rowPoorTuitionRow);
                return rowPoorTuitionRow;
            }
            
            public PoorTuitionRow FindBystidtdate(int stid, System.DateTime tdate) {
                return ((PoorTuitionRow)(this.Rows.Find(new object[] {
                            stid,
                            tdate})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PoorTuitionDataTable cln = ((PoorTuitionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PoorTuitionDataTable();
            }
            
            internal void InitVars() {
                this.columnstid = this.Columns["stid"];
                this.columntdate = this.Columns["tdate"];
                this.columntsize = this.Columns["tsize"];
                this.columntdesc = this.Columns["tdesc"];
            }
            
            private void InitClass() {
                this.columnstid = new DataColumn("stid", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstid);
                this.columntdate = new DataColumn("tdate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntdate);
                this.columntsize = new DataColumn("tsize", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntsize);
                this.columntdesc = new DataColumn("tdesc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntdesc);
                this.Constraints.Add(new UniqueConstraint("DatasetPoorKey2", new DataColumn[] {
                                this.columnstid,
                                this.columntdate}, true));
                this.Constraints.Add(new UniqueConstraint("key1", new DataColumn[] {
                                this.columnstid}, false));
                this.columnstid.AllowDBNull = false;
                this.columnstid.Unique = true;
                this.columntdate.AllowDBNull = false;
            }
            
            public PoorTuitionRow NewPoorTuitionRow() {
                return ((PoorTuitionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PoorTuitionRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PoorTuitionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PoorTuitionRowChanged != null)) {
                    this.PoorTuitionRowChanged(this, new PoorTuitionRowChangeEvent(((PoorTuitionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PoorTuitionRowChanging != null)) {
                    this.PoorTuitionRowChanging(this, new PoorTuitionRowChangeEvent(((PoorTuitionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PoorTuitionRowDeleted != null)) {
                    this.PoorTuitionRowDeleted(this, new PoorTuitionRowChangeEvent(((PoorTuitionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PoorTuitionRowDeleting != null)) {
                    this.PoorTuitionRowDeleting(this, new PoorTuitionRowChangeEvent(((PoorTuitionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePoorTuitionRow(PoorTuitionRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PoorTuitionRow : DataRow {
            
            private PoorTuitionDataTable tablePoorTuition;
            
            internal PoorTuitionRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePoorTuition = ((PoorTuitionDataTable)(this.Table));
            }
            
            public int stid {
                get {
                    return ((int)(this[this.tablePoorTuition.stidColumn]));
                }
                set {
                    this[this.tablePoorTuition.stidColumn] = value;
                }
            }
            
            public System.DateTime tdate {
                get {
                    return ((System.DateTime)(this[this.tablePoorTuition.tdateColumn]));
                }
                set {
                    this[this.tablePoorTuition.tdateColumn] = value;
                }
            }
            
            public System.Single tsize {
                get {
                    try {
                        return ((System.Single)(this[this.tablePoorTuition.tsizeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoorTuition.tsizeColumn] = value;
                }
            }
            
            public string tdesc {
                get {
                    try {
                        return ((string)(this[this.tablePoorTuition.tdescColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoorTuition.tdescColumn] = value;
                }
            }
            
            public PoorRow PoorRow {
                get {
                    return ((PoorRow)(this.GetParentRow(this.Table.ParentRelations["PoorPoorTuition"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PoorPoorTuition"]);
                }
            }
            
            public bool IstsizeNull() {
                return this.IsNull(this.tablePoorTuition.tsizeColumn);
            }
            
            public void SettsizeNull() {
                this[this.tablePoorTuition.tsizeColumn] = System.Convert.DBNull;
            }
            
            public bool IstdescNull() {
                return this.IsNull(this.tablePoorTuition.tdescColumn);
            }
            
            public void SettdescNull() {
                this[this.tablePoorTuition.tdescColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PoorTuitionRowChangeEvent : EventArgs {
            
            private PoorTuitionRow eventRow;
            
            private DataRowAction eventAction;
            
            public PoorTuitionRowChangeEvent(PoorTuitionRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PoorTuitionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
