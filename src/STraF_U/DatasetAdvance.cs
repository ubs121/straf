//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace STraF_U {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DatasetAdvance : DataSet {
        
        private AdvanceDataTable tableAdvance;
        
        private AdvanceTuitionDataTable tableAdvanceTuition;
        
        private DataRelation relationAdvanceAdvanceTuition;
        
        public DatasetAdvance() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DatasetAdvance(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Advance"] != null)) {
                    this.Tables.Add(new AdvanceDataTable(ds.Tables["Advance"]));
                }
                if ((ds.Tables["AdvanceTuition"] != null)) {
                    this.Tables.Add(new AdvanceTuitionDataTable(ds.Tables["AdvanceTuition"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AdvanceDataTable Advance {
            get {
                return this.tableAdvance;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AdvanceTuitionDataTable AdvanceTuition {
            get {
                return this.tableAdvanceTuition;
            }
        }
        
        public override DataSet Clone() {
            DatasetAdvance cln = ((DatasetAdvance)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Advance"] != null)) {
                this.Tables.Add(new AdvanceDataTable(ds.Tables["Advance"]));
            }
            if ((ds.Tables["AdvanceTuition"] != null)) {
                this.Tables.Add(new AdvanceTuitionDataTable(ds.Tables["AdvanceTuition"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAdvance = ((AdvanceDataTable)(this.Tables["Advance"]));
            if ((this.tableAdvance != null)) {
                this.tableAdvance.InitVars();
            }
            this.tableAdvanceTuition = ((AdvanceTuitionDataTable)(this.Tables["AdvanceTuition"]));
            if ((this.tableAdvanceTuition != null)) {
                this.tableAdvanceTuition.InitVars();
            }
            this.relationAdvanceAdvanceTuition = this.Relations["AdvanceAdvanceTuition"];
        }
        
        private void InitClass() {
            this.DataSetName = "DatasetAdvance";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DatasetAdvance.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAdvance = new AdvanceDataTable();
            this.Tables.Add(this.tableAdvance);
            this.tableAdvanceTuition = new AdvanceTuitionDataTable();
            this.Tables.Add(this.tableAdvanceTuition);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("AdvanceAdvanceTuition", new DataColumn[] {
                        this.tableAdvance.idColumn}, new DataColumn[] {
                        this.tableAdvanceTuition.stidColumn});
            this.tableAdvanceTuition.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            this.relationAdvanceAdvanceTuition = new DataRelation("AdvanceAdvanceTuition", new DataColumn[] {
                        this.tableAdvance.idColumn}, new DataColumn[] {
                        this.tableAdvanceTuition.stidColumn}, false);
            this.Relations.Add(this.relationAdvanceAdvanceTuition);
        }
        
        private bool ShouldSerializeAdvance() {
            return false;
        }
        
        private bool ShouldSerializeAdvanceTuition() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void AdvanceRowChangeEventHandler(object sender, AdvanceRowChangeEvent e);
        
        public delegate void AdvanceTuitionRowChangeEventHandler(object sender, AdvanceTuitionRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AdvanceDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnid;
            
            private DataColumn columnlname;
            
            private DataColumn columnfname;
            
            private DataColumn columngender;
            
            private DataColumn columnprof;
            
            private DataColumn columngrade;
            
            private DataColumn columngpa;
            
            private DataColumn columnregion;
            
            private DataColumn columnadmisno;
            
            private DataColumn columnpasno;
            
            private DataColumn columnregno;
            
            private DataColumn columntype;
            
            private DataColumn columncertificate;
            
            private DataColumn columngrant;
            
            private DataColumn columnstate;
            
            private DataColumn columnnote;
            
            internal AdvanceDataTable() : 
                    base("Advance") {
                this.InitClass();
            }
            
            internal AdvanceDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            internal DataColumn lnameColumn {
                get {
                    return this.columnlname;
                }
            }
            
            internal DataColumn fnameColumn {
                get {
                    return this.columnfname;
                }
            }
            
            internal DataColumn genderColumn {
                get {
                    return this.columngender;
                }
            }
            
            internal DataColumn profColumn {
                get {
                    return this.columnprof;
                }
            }
            
            internal DataColumn gradeColumn {
                get {
                    return this.columngrade;
                }
            }
            
            internal DataColumn gpaColumn {
                get {
                    return this.columngpa;
                }
            }
            
            internal DataColumn regionColumn {
                get {
                    return this.columnregion;
                }
            }
            
            internal DataColumn admisnoColumn {
                get {
                    return this.columnadmisno;
                }
            }
            
            internal DataColumn pasnoColumn {
                get {
                    return this.columnpasno;
                }
            }
            
            internal DataColumn regnoColumn {
                get {
                    return this.columnregno;
                }
            }
            
            internal DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            internal DataColumn certificateColumn {
                get {
                    return this.columncertificate;
                }
            }
            
            internal DataColumn grantColumn {
                get {
                    return this.columngrant;
                }
            }
            
            internal DataColumn stateColumn {
                get {
                    return this.columnstate;
                }
            }
            
            internal DataColumn noteColumn {
                get {
                    return this.columnnote;
                }
            }
            
            public AdvanceRow this[int index] {
                get {
                    return ((AdvanceRow)(this.Rows[index]));
                }
            }
            
            public event AdvanceRowChangeEventHandler AdvanceRowChanged;
            
            public event AdvanceRowChangeEventHandler AdvanceRowChanging;
            
            public event AdvanceRowChangeEventHandler AdvanceRowDeleted;
            
            public event AdvanceRowChangeEventHandler AdvanceRowDeleting;
            
            public void AddAdvanceRow(AdvanceRow row) {
                this.Rows.Add(row);
            }
            
            public AdvanceRow AddAdvanceRow(string lname, string fname, string gender, string prof, System.Byte grade, System.Single gpa, string region, string admisno, string pasno, string regno, string type, string certificate, System.Single grant, System.Byte state, string note) {
                AdvanceRow rowAdvanceRow = ((AdvanceRow)(this.NewRow()));
                rowAdvanceRow.ItemArray = new object[] {
                        null,
                        lname,
                        fname,
                        gender,
                        prof,
                        grade,
                        gpa,
                        region,
                        admisno,
                        pasno,
                        regno,
                        type,
                        certificate,
                        grant,
                        state,
                        note};
                this.Rows.Add(rowAdvanceRow);
                return rowAdvanceRow;
            }
            
            public AdvanceRow FindByid(int id) {
                return ((AdvanceRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AdvanceDataTable cln = ((AdvanceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AdvanceDataTable();
            }
            
            internal void InitVars() {
                this.columnid = this.Columns["id"];
                this.columnlname = this.Columns["lname"];
                this.columnfname = this.Columns["fname"];
                this.columngender = this.Columns["gender"];
                this.columnprof = this.Columns["prof"];
                this.columngrade = this.Columns["grade"];
                this.columngpa = this.Columns["gpa"];
                this.columnregion = this.Columns["region"];
                this.columnadmisno = this.Columns["admisno"];
                this.columnpasno = this.Columns["pasno"];
                this.columnregno = this.Columns["regno"];
                this.columntype = this.Columns["type"];
                this.columncertificate = this.Columns["certificate"];
                this.columngrant = this.Columns["grant"];
                this.columnstate = this.Columns["state"];
                this.columnnote = this.Columns["note"];
            }
            
            private void InitClass() {
                this.columnid = new DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnid);
                this.columnlname = new DataColumn("lname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlname);
                this.columnfname = new DataColumn("fname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfname);
                this.columngender = new DataColumn("gender", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columngender);
                this.columnprof = new DataColumn("prof", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprof);
                this.columngrade = new DataColumn("grade", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columngrade);
                this.columngpa = new DataColumn("gpa", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columngpa);
                this.columnregion = new DataColumn("region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnregion);
                this.columnadmisno = new DataColumn("admisno", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnadmisno);
                this.columnpasno = new DataColumn("pasno", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpasno);
                this.columnregno = new DataColumn("regno", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnregno);
                this.columntype = new DataColumn("type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntype);
                this.columncertificate = new DataColumn("certificate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncertificate);
                this.columngrant = new DataColumn("grant", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columngrant);
                this.columnstate = new DataColumn("state", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstate);
                this.columnnote = new DataColumn("note", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnote);
                this.Constraints.Add(new UniqueConstraint("DatasetAdvanceKey1", new DataColumn[] {
                                this.columnid}, true));
                this.columnid.AutoIncrement = true;
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columngender.DefaultValue = "эр";
                this.columngrade.DefaultValue = 1;
                this.columngpa.DefaultValue = 0F;
                this.columnregion.DefaultValue = "Улаанбаатар";
                this.columntype.DefaultValue = "бүтэн өнчин";
                this.columnstate.DefaultValue = 1;
            }
            
            public AdvanceRow NewAdvanceRow() {
                return ((AdvanceRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AdvanceRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AdvanceRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AdvanceRowChanged != null)) {
                    this.AdvanceRowChanged(this, new AdvanceRowChangeEvent(((AdvanceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AdvanceRowChanging != null)) {
                    this.AdvanceRowChanging(this, new AdvanceRowChangeEvent(((AdvanceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AdvanceRowDeleted != null)) {
                    this.AdvanceRowDeleted(this, new AdvanceRowChangeEvent(((AdvanceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AdvanceRowDeleting != null)) {
                    this.AdvanceRowDeleting(this, new AdvanceRowChangeEvent(((AdvanceRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAdvanceRow(AdvanceRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AdvanceRow : DataRow {
            
            private AdvanceDataTable tableAdvance;
            
            internal AdvanceRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAdvance = ((AdvanceDataTable)(this.Table));
            }
            
            public int id {
                get {
                    return ((int)(this[this.tableAdvance.idColumn]));
                }
                set {
                    this[this.tableAdvance.idColumn] = value;
                }
            }
            
            public string lname {
                get {
                    try {
                        return ((string)(this[this.tableAdvance.lnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdvance.lnameColumn] = value;
                }
            }
            
            public string fname {
                get {
                    try {
                        return ((string)(this[this.tableAdvance.fnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdvance.fnameColumn] = value;
                }
            }
            
            public string gender {
                get {
                    try {
                        return ((string)(this[this.tableAdvance.genderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdvance.genderColumn] = value;
                }
            }
            
            public string prof {
                get {
                    try {
                        return ((string)(this[this.tableAdvance.profColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdvance.profColumn] = value;
                }
            }
            
            public System.Byte grade {
                get {
                    try {
                        return ((System.Byte)(this[this.tableAdvance.gradeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdvance.gradeColumn] = value;
                }
            }
            
            public System.Single gpa {
                get {
                    try {
                        return ((System.Single)(this[this.tableAdvance.gpaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdvance.gpaColumn] = value;
                }
            }
            
            public string region {
                get {
                    try {
                        return ((string)(this[this.tableAdvance.regionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdvance.regionColumn] = value;
                }
            }
            
            public string admisno {
                get {
                    try {
                        return ((string)(this[this.tableAdvance.admisnoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdvance.admisnoColumn] = value;
                }
            }
            
            public string pasno {
                get {
                    try {
                        return ((string)(this[this.tableAdvance.pasnoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdvance.pasnoColumn] = value;
                }
            }
            
            public string regno {
                get {
                    try {
                        return ((string)(this[this.tableAdvance.regnoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdvance.regnoColumn] = value;
                }
            }
            
            public string type {
                get {
                    try {
                        return ((string)(this[this.tableAdvance.typeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdvance.typeColumn] = value;
                }
            }
            
            public string certificate {
                get {
                    try {
                        return ((string)(this[this.tableAdvance.certificateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdvance.certificateColumn] = value;
                }
            }
            
            public System.Single grant {
                get {
                    try {
                        return ((System.Single)(this[this.tableAdvance.grantColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdvance.grantColumn] = value;
                }
            }
            
            public System.Byte state {
                get {
                    try {
                        return ((System.Byte)(this[this.tableAdvance.stateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdvance.stateColumn] = value;
                }
            }
            
            public string note {
                get {
                    try {
                        return ((string)(this[this.tableAdvance.noteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdvance.noteColumn] = value;
                }
            }
            
            public bool IslnameNull() {
                return this.IsNull(this.tableAdvance.lnameColumn);
            }
            
            public void SetlnameNull() {
                this[this.tableAdvance.lnameColumn] = System.Convert.DBNull;
            }
            
            public bool IsfnameNull() {
                return this.IsNull(this.tableAdvance.fnameColumn);
            }
            
            public void SetfnameNull() {
                this[this.tableAdvance.fnameColumn] = System.Convert.DBNull;
            }
            
            public bool IsgenderNull() {
                return this.IsNull(this.tableAdvance.genderColumn);
            }
            
            public void SetgenderNull() {
                this[this.tableAdvance.genderColumn] = System.Convert.DBNull;
            }
            
            public bool IsprofNull() {
                return this.IsNull(this.tableAdvance.profColumn);
            }
            
            public void SetprofNull() {
                this[this.tableAdvance.profColumn] = System.Convert.DBNull;
            }
            
            public bool IsgradeNull() {
                return this.IsNull(this.tableAdvance.gradeColumn);
            }
            
            public void SetgradeNull() {
                this[this.tableAdvance.gradeColumn] = System.Convert.DBNull;
            }
            
            public bool IsgpaNull() {
                return this.IsNull(this.tableAdvance.gpaColumn);
            }
            
            public void SetgpaNull() {
                this[this.tableAdvance.gpaColumn] = System.Convert.DBNull;
            }
            
            public bool IsregionNull() {
                return this.IsNull(this.tableAdvance.regionColumn);
            }
            
            public void SetregionNull() {
                this[this.tableAdvance.regionColumn] = System.Convert.DBNull;
            }
            
            public bool IsadmisnoNull() {
                return this.IsNull(this.tableAdvance.admisnoColumn);
            }
            
            public void SetadmisnoNull() {
                this[this.tableAdvance.admisnoColumn] = System.Convert.DBNull;
            }
            
            public bool IspasnoNull() {
                return this.IsNull(this.tableAdvance.pasnoColumn);
            }
            
            public void SetpasnoNull() {
                this[this.tableAdvance.pasnoColumn] = System.Convert.DBNull;
            }
            
            public bool IsregnoNull() {
                return this.IsNull(this.tableAdvance.regnoColumn);
            }
            
            public void SetregnoNull() {
                this[this.tableAdvance.regnoColumn] = System.Convert.DBNull;
            }
            
            public bool IstypeNull() {
                return this.IsNull(this.tableAdvance.typeColumn);
            }
            
            public void SettypeNull() {
                this[this.tableAdvance.typeColumn] = System.Convert.DBNull;
            }
            
            public bool IscertificateNull() {
                return this.IsNull(this.tableAdvance.certificateColumn);
            }
            
            public void SetcertificateNull() {
                this[this.tableAdvance.certificateColumn] = System.Convert.DBNull;
            }
            
            public bool IsgrantNull() {
                return this.IsNull(this.tableAdvance.grantColumn);
            }
            
            public void SetgrantNull() {
                this[this.tableAdvance.grantColumn] = System.Convert.DBNull;
            }
            
            public bool IsstateNull() {
                return this.IsNull(this.tableAdvance.stateColumn);
            }
            
            public void SetstateNull() {
                this[this.tableAdvance.stateColumn] = System.Convert.DBNull;
            }
            
            public bool IsnoteNull() {
                return this.IsNull(this.tableAdvance.noteColumn);
            }
            
            public void SetnoteNull() {
                this[this.tableAdvance.noteColumn] = System.Convert.DBNull;
            }
            
            public AdvanceTuitionRow[] GetAdvanceTuitionRows() {
                return ((AdvanceTuitionRow[])(this.GetChildRows(this.Table.ChildRelations["AdvanceAdvanceTuition"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AdvanceRowChangeEvent : EventArgs {
            
            private AdvanceRow eventRow;
            
            private DataRowAction eventAction;
            
            public AdvanceRowChangeEvent(AdvanceRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AdvanceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AdvanceTuitionDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnstid;
            
            private DataColumn columntdate;
            
            private DataColumn columntsize;
            
            private DataColumn columntdesc;
            
            internal AdvanceTuitionDataTable() : 
                    base("AdvanceTuition") {
                this.InitClass();
            }
            
            internal AdvanceTuitionDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn stidColumn {
                get {
                    return this.columnstid;
                }
            }
            
            internal DataColumn tdateColumn {
                get {
                    return this.columntdate;
                }
            }
            
            internal DataColumn tsizeColumn {
                get {
                    return this.columntsize;
                }
            }
            
            internal DataColumn tdescColumn {
                get {
                    return this.columntdesc;
                }
            }
            
            public AdvanceTuitionRow this[int index] {
                get {
                    return ((AdvanceTuitionRow)(this.Rows[index]));
                }
            }
            
            public event AdvanceTuitionRowChangeEventHandler AdvanceTuitionRowChanged;
            
            public event AdvanceTuitionRowChangeEventHandler AdvanceTuitionRowChanging;
            
            public event AdvanceTuitionRowChangeEventHandler AdvanceTuitionRowDeleted;
            
            public event AdvanceTuitionRowChangeEventHandler AdvanceTuitionRowDeleting;
            
            public void AddAdvanceTuitionRow(AdvanceTuitionRow row) {
                this.Rows.Add(row);
            }
            
            public AdvanceTuitionRow AddAdvanceTuitionRow(AdvanceRow parentAdvanceRowByAdvanceAdvanceTuition, System.DateTime tdate, System.Single tsize, string tdesc) {
                AdvanceTuitionRow rowAdvanceTuitionRow = ((AdvanceTuitionRow)(this.NewRow()));
                rowAdvanceTuitionRow.ItemArray = new object[] {
                        parentAdvanceRowByAdvanceAdvanceTuition[0],
                        tdate,
                        tsize,
                        tdesc};
                this.Rows.Add(rowAdvanceTuitionRow);
                return rowAdvanceTuitionRow;
            }
            
            public AdvanceTuitionRow FindBystidtdate(int stid, System.DateTime tdate) {
                return ((AdvanceTuitionRow)(this.Rows.Find(new object[] {
                            stid,
                            tdate})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AdvanceTuitionDataTable cln = ((AdvanceTuitionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AdvanceTuitionDataTable();
            }
            
            internal void InitVars() {
                this.columnstid = this.Columns["stid"];
                this.columntdate = this.Columns["tdate"];
                this.columntsize = this.Columns["tsize"];
                this.columntdesc = this.Columns["tdesc"];
            }
            
            private void InitClass() {
                this.columnstid = new DataColumn("stid", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstid);
                this.columntdate = new DataColumn("tdate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntdate);
                this.columntsize = new DataColumn("tsize", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntsize);
                this.columntdesc = new DataColumn("tdesc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntdesc);
                this.Constraints.Add(new UniqueConstraint("DatasetAdvanceKey2", new DataColumn[] {
                                this.columnstid,
                                this.columntdate}, true));
                this.Constraints.Add(new UniqueConstraint("key1", new DataColumn[] {
                                this.columnstid}, false));
                this.columnstid.AllowDBNull = false;
                this.columnstid.Unique = true;
                this.columntdate.AllowDBNull = false;
            }
            
            public AdvanceTuitionRow NewAdvanceTuitionRow() {
                return ((AdvanceTuitionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AdvanceTuitionRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AdvanceTuitionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AdvanceTuitionRowChanged != null)) {
                    this.AdvanceTuitionRowChanged(this, new AdvanceTuitionRowChangeEvent(((AdvanceTuitionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AdvanceTuitionRowChanging != null)) {
                    this.AdvanceTuitionRowChanging(this, new AdvanceTuitionRowChangeEvent(((AdvanceTuitionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AdvanceTuitionRowDeleted != null)) {
                    this.AdvanceTuitionRowDeleted(this, new AdvanceTuitionRowChangeEvent(((AdvanceTuitionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AdvanceTuitionRowDeleting != null)) {
                    this.AdvanceTuitionRowDeleting(this, new AdvanceTuitionRowChangeEvent(((AdvanceTuitionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAdvanceTuitionRow(AdvanceTuitionRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AdvanceTuitionRow : DataRow {
            
            private AdvanceTuitionDataTable tableAdvanceTuition;
            
            internal AdvanceTuitionRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAdvanceTuition = ((AdvanceTuitionDataTable)(this.Table));
            }
            
            public int stid {
                get {
                    return ((int)(this[this.tableAdvanceTuition.stidColumn]));
                }
                set {
                    this[this.tableAdvanceTuition.stidColumn] = value;
                }
            }
            
            public System.DateTime tdate {
                get {
                    return ((System.DateTime)(this[this.tableAdvanceTuition.tdateColumn]));
                }
                set {
                    this[this.tableAdvanceTuition.tdateColumn] = value;
                }
            }
            
            public System.Single tsize {
                get {
                    try {
                        return ((System.Single)(this[this.tableAdvanceTuition.tsizeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdvanceTuition.tsizeColumn] = value;
                }
            }
            
            public string tdesc {
                get {
                    try {
                        return ((string)(this[this.tableAdvanceTuition.tdescColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdvanceTuition.tdescColumn] = value;
                }
            }
            
            public AdvanceRow AdvanceRow {
                get {
                    return ((AdvanceRow)(this.GetParentRow(this.Table.ParentRelations["AdvanceAdvanceTuition"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AdvanceAdvanceTuition"]);
                }
            }
            
            public bool IstsizeNull() {
                return this.IsNull(this.tableAdvanceTuition.tsizeColumn);
            }
            
            public void SettsizeNull() {
                this[this.tableAdvanceTuition.tsizeColumn] = System.Convert.DBNull;
            }
            
            public bool IstdescNull() {
                return this.IsNull(this.tableAdvanceTuition.tdescColumn);
            }
            
            public void SettdescNull() {
                this[this.tableAdvanceTuition.tdescColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AdvanceTuitionRowChangeEvent : EventArgs {
            
            private AdvanceTuitionRow eventRow;
            
            private DataRowAction eventAction;
            
            public AdvanceTuitionRowChangeEvent(AdvanceTuitionRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AdvanceTuitionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
